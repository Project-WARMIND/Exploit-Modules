import sys
import datetime

import scapy.all


class NoRangeGiven(EnvironmentError): pass


class ArpScanner(object):

    def __init__(self, interface=False, passive=False, rng=False):
        self.interface = interface
        self.passive = passive
        self.range = rng
        self.start_time = datetime.datetime.now()
        self.filter = 'arp'
        self.discovered_hosts = {}

    def passive_handler(self, packet):
        try:
            if not packet[scapy.all.ARP].psrc in self.discovered_hosts.keys():
                print("\t{} - {}".format(packet[scapy.all.ARP].prsc, packet[scapy.all.ARP].hwsrc))
                self.discovered_hosts[packet[scapy.all.ARP].prsc] = packet[scapy.all.ARP].hwsrc
        except Exception as e:
            return e.__class__, e.message

    def passive_sniffer(self):
        if not self.range:
            raise NoRangeGiven("no range provided")
        else:
            self.filter += ' and (net {})'.format(self.range)
        print("sniffing packets on {}".format(self.interface))
        try:
            scapy.all.sniff(filter=self.filter, prn=self.passive_handler, store=0)
        except Exception as e:
            return e.__class__, e.message
        print("sniffing stopped")
        duration = datetime.datetime.now() - self.start_time
        print("duration: {}".format(duration))

    def active_scan(self):
        print("scanning for hosts")
        sys.stdout.flush()
        try:
            ans = scapy.all.srp(scapy.all.Ether(dst="ff:ff:ff:ff:ff:ff")/scapy.all.ARP(pdst=self.range), timeout=2, iface=self.interface, inter=0.1)[0]
        except Exception as e:
            return e.__class__, e.message
        for snd, rcv in ans:
            key, value = rcv[scapy.all.ARP].prsc, rcv[scapy.all.ARP].hwsrc
            self.discovered_hosts[key] = value
            print("\t{} - {}".format(key, value))
        return

