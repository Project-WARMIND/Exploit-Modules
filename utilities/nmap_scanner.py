import json

import nmap


class NMAPScanner(object):

    NM = nmap.PortScanner()

    def __init__(self, ip, **kwargs):
        self.ip = ip
        self.verbose = kwargs.get("verbose", False)
        self.pretty = kwargs.get("pretty", True)
        self.opts = kwargs.get("opts", "")

    def get_all_info(self):
        """
        get all the information from the scan
        """
        if isinstance(self.opts, (list, tuple)):
            self.opts = ""
        scanned_data = self.NM.scan(self.ip, arguments=self.opts)
        if self.pretty:
            scanned_data = json.dumps(scanned_data, indent=4, sort_keys=True)
        return scanned_data

    def show_open_ports(self, json_data, sep="-" * 30):
        """
        outputs the current scan information
        """
        # have to create a spacer or the output comes out funky..
        spacer_data = {4: " " * 8, 6: " " * 6, 8: " " * 4}
        print("finding data for IP '{}'".format(self.ip))
        json_data = json.loads(json_data)["scan"]
        host = json_data[self.ip]["hostnames"][0]["name"]
        host_skip = (not len(host) == 0, " ", "", None)
        print(
            "{}\nScanned: {} ({})\tStatus: {}\nProtocol: {}\n".format(
                sep, self.ip,
                host if host != any(s for s in list(host_skip)) else "unknown",
                json_data[self.ip]["status"]["state"],
                "TCP"
            )
        )
        oports = json_data[self.ip]["tcp"].keys()
        oports.sort()
        for port in oports:
            port_status = json_data[self.ip]["tcp"][port]["state"]
            # output the found port information..
            print(
                "Port: {}\tStatus: {}{}Type: {}".format(
                    port, json_data[self.ip]["tcp"][port]["state"],
                    spacer_data[len(port_status)],
                    json_data[self.ip]["tcp"][port]["name"]
                )
            )
            print("{}".format(sep))
